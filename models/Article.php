<<<<<<< HEAD
<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "article".
 *
 * @property int $id
 * @property string $title
 * @property string $short_text
 * @property string $description
 * @property string $date
 * @property string $media
 * @property int $viewed
 * @property int $user_id
 * @property int $status
 * @property int $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'short_text', 'description'], 'required'],
            [['title', 'short_text', 'description',], 'string'],
            [['date'], 'date', 'format' => 'php:Y-m-d'],
            [['date'], 'default', 'value' => date('Y-m-d')],
            [['title'], 'string', 'max' => 255]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'short_text' => 'Short Text',
            'description' => 'Description',
            'date' => 'Date',
            'media' => 'Media',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }

    public function saveMedia($filename)
    {
        $this->media = $filename;
        return $this->save(false);
    }

    public function getMedia()
    {
        return ($this->media) ? '/uploads/' . $this->media : '/no-media.png';
    }

    public function deleteMedia()
    {
        $mediaUploadModel = new MediaUpload();
        $mediaUploadModel->deleteCurrentMedia($this->media);
    }

    public function beforeDelete()
    {
        $this->deleteMedia();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getCategory()
    {
        return $this->hasOne(Category::classname(), ['id' => 'category_id']);
    }

    public function saveCategory($category_id)
    {
        $category = Category::findOne($category_id);
        if($category != null)
        {
            $this->link('category', $category);
            return true;
        }
    }

    public function getTags()
    {
        return $this->hasMany(Tag::classname(), ['id' => 'tag_id'])
            ->viaTable('article_tag', ['article_id' => 'id']);
    }

    public function getSelectedTags()
    {
        $selectedTags = $this->getTags()->select('id')->asArray()->all();
    }

    public function saveArticle()
    {
        $this->user_id = Yii::$app->user->id;
        return $this->save();
    }


    public function viewedCounter()
    {
        $this->viewed += 1;
        return $this->save(false);
    }
}
=======
<?php

namespace app\models;

use Yii;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\TimestampBehavior;
//use yii\behaviors\SluggableBehavior;
use zabachok\behaviors\SluggableBehavior;
use yii\db\ActiveRecord;
/**
 * This is the model class for table "{{%article}}".
 *
 * @property int $id
 * @property string $slug
 * @property string $title
 * @property string $meta_keywords
 * @property string $meta_description
 * @property string $content
 * @property int $status
 * @property int $created_at
 * @property int $updated_at
 * @property int $created_by
 */
class Article extends \yii\db\ActiveRecord
{
    const STATUS_OK=10;
    const STATUS_CONCEL=0;
    public function behaviors(){
        return [
            [
                'class'=>TimestampBehavior::className(),
                'attributes'=>[
                    \yii\db\ActiveRecord::EVENT_BEFORE_INSERT=>['created_at', 'updated_at'],
                    \yii\db\ActiveRecord::EVENT_BEFORE_UPDATE=>['updated_at'],
                ],
                'value'=>function(){ return date('U');},
            ],
            [
                'class'=>AttributeBehavior::className(),
                'attributes'=>[
                    ActiveRecord::EVENT_BEFORE_INSERT=>['created_by'],
                ],
                'value' => function ($event) {
                    return Yii::$app->user->getId();
                },
            ],
            [
                'class'=>SluggableBehavior::className(),
                'attribute'=>'title',
                'immutable' => true,
                'ensureUnique'=>true,
            ],

        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%article}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['slug'], 'required'],
            [['title', 'meta_keywords', 'meta_description', 'content'], 'string'],
            [['status', 'created_at', 'updated_at', 'created_by', 'in_menu', 'sort'], 'integer'],
            [['slug'], 'string', 'max' => 255],
        ];
    }


    public function getProfile()
    {
        return $this->hasOne(Profile::className(), ['user_id'=>'created_by']);
    }



    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'slug' => Yii::t('app', 'Slug'),
            'title' => Yii::t('app', 'Заголовок'),
            'meta_keywords' => Yii::t('app', 'Ключевые слова'),
            'meta_description' => Yii::t('app', 'Описание'),
            'content' => Yii::t('app', 'Content'),
            'status' => Yii::t('app', 'Статус'),
            'created_at' => Yii::t('app', 'Создан в'),
            'updated_at' => Yii::t('app', 'Обновлено на'),
            'created_by' => Yii::t('app', 'Создано'),
            'in_menu' => Yii::t('app', 'Основная меню'),
            'sort' => Yii::t('app', 'Сорт'),
        ];
    }

    public static function getStatuses(){
        return [
            self::STATUS_OK=>"Опубликован",
            self::STATUS_CONCEL => "Не опубликован",
        ];
    }
}
>>>>>>> origin/master
